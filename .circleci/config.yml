version: 2.1
jobs:
  build:
    docker:
      - image: circleci/php:7.3-node-browsers
      - image: circleci/postgres:11.6-alpine # テストでもPostgreSQLが使用できる設定を追加
        environment: # imageと並ぶenvironment PostgreSQLのコンテナに対する環境変数
          POSTGRES_DB: larasns
          POSTGRES_USER: default
          POSTGRES_PASSWORD: secret
    environment: # ジョブ名の配下のenvironment buildジョブ全体に適用される環境変数
      APP_ENV: testing
      DB_CONNECTION: pgsql
      DB_HOST: localhost
      DB_PORT: 5432
      DB_DATABASE: larasns
      DB_USERNAME: default
      DB_PASSWORD: secret
    steps:
      - checkout # checkoutは、GitHubからCircleCIの環境にソースコードをコピー(git clone)する
      - run: sudo composer self-update --1 # イメージが古くなり、エラーを回避するために導入
      - restore_cache: # restore_cacheでは、保存されたキャッシュを復元
          key: composer-v1-{{ checksum "composer.lock" }} # keyには、復元するキャッシュの名前を指定　checksumはファイルをハッシュ化する
      - run: composer install -n --prefer-dist # Composerを使用してPHP関連パッケージのインストール ci環境では毎回必要
      - save_cache: # save_cacheでは、keyに指定した名前でキャッシュを保存
          key: composer-v1-{{ checksum "composer.lock" }} # 新たにキャッシュを保存し直したい時は、v2, v3と名前を変える必要がある
          paths: # 保存するディレクトリ名やファイル名はpathsに指定
            - vendor # CircleCIでは、キャッシュを約1ヶ月保存してくれますが、意図的にキャッシュをクリアする方法はない
      - restore_cache: # JavaScript関連パッケージの保存されたキャッシュを復元するようにする
          key: npm-v1-{{ checksum "package-lock.json" }}
      #- run: npm ci # npmを使用してJavaScript関連パッケージをインストール
      - run:
          name: npm ci
          command: | # CircleCIのcommandに複数行に渡ってコマンドを記述する時は、まず最初に|を記述し、次の行からコマンドを記述
            if [ ! -d node_modules ]; then
              npm ci
            fi
      - save_cache: # pathsに指定したnode_modulesをキャッシュに保存
          key: npm-v1-{{ checksum "package-lock.json" }} # npmによってインストールされたパッケージのキャッシュであることがわかるように先頭はnpm
          paths: # package-lock.jsonでは、npmによってインストールされた各パッケージのバージョンが、依存パッケージも含め管理
            - node_modules #
      - run: npm run dev # JavaScriptのトランスパイル 省略形 通常はrunのあとにnameやcommandを定義
      - run: # PHPからPostgreSQLへ接続するための準備
          name: get ready for postgres # -timeout 1m 通信が成功するまで最大1分待つ PostgreSQLのコンテナの起動が完了するより前に次のPHPUnitのステップが開始することの無いように
          command: |
            sudo apt-get update
            sudo apt-get install libpq-dev
            sudo docker-php-ext-install pdo_pgsql
            dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: php test
          command: vendor/bin/phpunit
